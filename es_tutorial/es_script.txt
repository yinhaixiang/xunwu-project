# 检查集群健康
GET _cluster/health

# 创建people索引
PUT people
{
  "settings": {
    "number_of_shards": 3,
    "number_of_replicas": 1
  },
  "mappings": {
    "properties": {
      "type": {"type": "keyword"},
      "name": {"type": "text"},
      "country": {"type": "keyword"},
      "age": {"type": "integer"},
      "date": {
        "type": "date",
        "format": "yyyy-MM-dd HH:mm:ss || yyyy-MM-dd || epoch_millis"
      }
    }
  }
}

# 指定文档ID插入
PUT people/_doc/1
{
  "type": "man",
  "name": "Zereao",
  "country": "China",
  "age": "23",
  "date": "1995-11-27",
  "AA": "bb"
}

# 自动生成ID插入
POST /people/_doc/
{
  "type": "man",
  "name": "AutoZereao",
  "country": "China",
  "age": "23",
  "date": "1995-11-27 12:25:35"
}

# 修改数据
POST people/_update/1/
{
  "doc": {
    "name": "sean"
  }
}

# 删除people索引中，ID为1的文档
DELETE people/_doc/1/

# 删除book索引
# DELETE book

# 简单查询，查询 book 索引中，ID为1 的文档
GET book/_doc/1

# 条件查询，查询所有数据
GET book/_search
{
  "query": {
    "match_all": {}
  }
}

# 条件查询，指定返回数据大小以及从哪里开始返回
POST book/_search
{
  "query": {
    "match_all": {}
  },
  "from": 2,
  "size": 3
}

# 条件查询，查询标题中包含 传 字的文档
POST book/_search
{
  "query": {
    "match": {
      "title": "传"
    }
  }
}

# 条件查询, 指定排序方式为按照publish_date降序排序
POST book/_search
{
  "query": {
    "match": {
      "title": "传"
    }
  },
  "sort": [
    {
      "publish_date": {
        "order": "desc"
      }
    }
  ]
}

# 聚合查询, 按照这一批book的字数进行聚合; 这是一个单个分组聚合
POST book/_search
{
  "aggs": {
    "group_by_word_count": {
      "terms": {
        "field": "word_count"
      }
    }
  }
}

# 聚合查询, 按照这一批book的字数和出版日期进行聚合; 这是一个多个分组聚合
POST book/_search
{
  "aggs": {
    "group_by_word_count": {
      "terms": {
        "field": "word_count"
      }
    },
    "group_by_publish_date": {
      "terms": {
        "field": "publish_date"
      }
    }
  }
}

# 聚合查询, 计算word_count字段的相关数据
POST book/_search
{
  "aggs": {
    "grades_word_count": {
      "stats": {
        "field": "word_count"
      }
    }
  }
}














